{"version":3,"sources":["helpers/enum/MoveDirectionType.ts","gameSettings.ts","helpers/functions/createInitalSnake.ts","helpers/functions/getRandomPosition.ts","context/GameContext/context.tsx","context/index.tsx","components/organisms/Board/styles.ts","components/atoms/Square/styles.ts","components/atoms/Square/index.tsx","components/molecules/Fruit/index.tsx","components/molecules/Snake/index.tsx","components/organisms/Board/index.tsx","components/atoms/NewGameButton/styles.ts","components/atoms/NewGameButton/index.tsx","components/atoms/PointScreen/styles.ts","components/atoms/PointScreen/index.tsx","components/organisms/Header/styles.ts","components/organisms/Header/index.tsx","components/templates/Game/styles.ts","components/molecules/GameOverDialog/index.tsx","components/atoms/DpadButton/styles.ts","components/atoms/DpadButton/index.tsx","components/molecules/MobileButtons/Down/index.tsx","components/molecules/MobileButtons/Left/index.tsx","components/molecules/MobileButtons/Right/index.tsx","components/molecules/MobileButtons/Up/index.tsx","components/molecules/DPad/styles.ts","components/molecules/DPad/index.tsx","components/organisms/MobileControls/styles.ts","components/organisms/MobileControls/index.tsx","components/templates/Game/index.tsx","App.tsx","index.tsx"],"names":["MoveDirectionType","GAME_SETTINGS","createInitalSnake","gameResolution","height","width","squareArea","top","Math","floor","left","snake","i","push","getRandomInt","min","max","random","getRandomPosition","DEFAULT_VALUE","state","fruit","pontuation","moveDirection","RIGHT","setState","start","changeDirection","newDirection","isGameOver","GameContext","createContext","GameContextProvider","children","useState","currentIntervalId","setCurrentIntervalId","isStart","setIsStart","speed","initial","speedSeconds","setSpeedSeconds","gameOver","undefined","clearInterval","moveSnake","removeLastNode","newSnake","currentSnakeHead","length","shift","LEFT","TOP","BOTTOM","verifyColision","checkSnakeCollidedWithBorders","filter","item","checkSnakeCollidedWithItself","toEatFruit","changeSpeed","minSpeed","speedDecay","useEffect","intervalId","setInterval","verifyFruit","JSON","stringify","Provider","value","console","log","GlobalContext","BoardContainer","styled","div","SquareDesign","Square","style","Fruit","useContext","background","Snake","map","index","border","Board","ButtonElement","button","NewGameButton","styles","fontFamily","className","onClick","PointScreenContainer","PointScreen","HeaderContainer","Header","GameContainer","GameOverDialog","id","open","textAlign","method","DpadButton","DownButton","LeftButton","RightButton","UpButton","DPadContainer","DPad","Up","Left","Right","Down","MobileControlsContainer","NewGameContainer","MobileControls","Game","role","tabIndex","onKeyUp","e","code","onKeyDown","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1969772b.chunk.js","sourcesContent":["enum MoveDirectionType {\r\n    TOP = 1,\r\n    BOTTOM = 2,\r\n    LEFT = 3,\r\n    RIGHT = 4,\r\n}\r\n\r\nexport default MoveDirectionType;","const GAME_SETTINGS = {\r\n    \"gameResolution\":{\r\n        \"width\": 350,\r\n        \"height\": 350,\r\n        \"squareArea\": 12.5\r\n    },\r\n    \"speed\": {\r\n        \"initial\": 300,\r\n        \"minSpeed\": 100,\r\n        \"speedDecay\": 25 \r\n    }\r\n};\r\n\r\nexport default GAME_SETTINGS;","import GAME_SETTINGS from \"../../gameSettings\";\r\nimport IPosition from \"../contracts/IPosition\";\r\n\r\nconst createInitalSnake = () => {\r\n    const { height, width, squareArea } = GAME_SETTINGS.gameResolution;  \r\n    const top = Math.floor(Math.floor(height/squareArea)/2) * squareArea;\r\n    const left = Math.floor(Math.floor(width/squareArea)/2) * squareArea;\r\n  \r\n    let snake: IPosition[] = [];\r\n  \r\n    for(let i = 0; i < 3; i++){\r\n      snake.push({top, left: left + (squareArea * i)});\r\n    }\r\n  \r\n    return snake;\r\n};\r\n\r\nexport default createInitalSnake;","import GAME_SETTINGS from \"../../gameSettings\";\r\nimport IPosition from \"../contracts/IPosition\";\r\nconst { width, height, squareArea } = GAME_SETTINGS.gameResolution;\r\n\r\nconst getRandomPosition = ():IPosition => {\r\n    let left = getRandomInt(0, width/squareArea) * squareArea;\r\n    let top = getRandomInt(0, height/squareArea) * squareArea;\r\n    \r\n    if(left == width)\r\n        left = left - squareArea;\r\n    if(top == height)\r\n        top = top - squareArea;\r\n    \r\n    return { left, top};\r\n};\r\n\r\nconst getRandomInt = (min: number, max: number) => {   \r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default getRandomPosition;","import React, { createContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport GAME_SETTINGS from \"../../gameSettings\";\r\nimport IPosition from '../../helpers/contracts/IPosition';\r\nimport MoveDirectionType from \"../../helpers/enum/MoveDirectionType\";\r\nimport createInitalSnake from \"../../helpers/functions/createInitalSnake\";\r\nimport getRandomPosition from \"../../helpers/functions/getRandomPosition\";\r\n\r\n//Tipando os dados que quero para usuário\r\ntype GameType = {\r\n    fruit: IPosition;\r\n    snake: IPosition[];\r\n    pontuation: number;\r\n    moveDirection: MoveDirectionType;\r\n    isGameOver: boolean;\r\n};\r\n\r\n//Tipando as Props do contexto\r\ntype PropsGameContext = {\r\n  state: GameType;\r\n  setState: React.Dispatch<React.SetStateAction<GameType>>;\r\n  start: () => void;\r\n  changeDirection: (newDirection: MoveDirectionType) => void;\r\n};\r\n\r\n\r\n\r\n//Valor default do contexto\r\nconst DEFAULT_VALUE = {\r\n  state: {\r\n    fruit: getRandomPosition(),\r\n    pontuation: 0,\r\n    moveDirection: MoveDirectionType.RIGHT,\r\n    snake: createInitalSnake()\r\n  } as GameType,\r\n  setState: () => {}, //função de inicialização\r\n  start: () => {},\r\n  changeDirection: (newDirection: MoveDirectionType) => {},\r\n  isGameOver: false\r\n};\r\n\r\n//criando nosso contexto GameContext\r\nconst GameContext = createContext<PropsGameContext>(DEFAULT_VALUE);\r\n\r\n/**\r\n * Função que irá conter o estado e função que irá alterar o estado 'setState'\r\n * quer irá prover o contexto para os componentes filhos da árvore\r\n */\r\nconst GameContextProvider: React.FC = ({ children }) => {\r\n  const [state, setState] = useState(DEFAULT_VALUE.state);\r\n  const [currentIntervalId, setCurrentIntervalId] = useState<NodeJS.Timeout>();\r\n  const [isStart, setIsStart] = useState(false);\r\n  const [speedSeconds, setSpeedSeconds] = useState(GAME_SETTINGS.speed.initial);\r\n  const start = () => {\r\n    console.log('new game');\r\n    if(currentIntervalId != undefined)\r\n        clearInterval(currentIntervalId);\r\n    setState({\r\n      ...state,\r\n      fruit: getRandomPosition(),\r\n      snake: createInitalSnake(),\r\n      pontuation: 0,\r\n      isGameOver: false\r\n    });\r\n    setSpeedSeconds(GAME_SETTINGS.speed.initial);\r\n    setIsStart(true);\r\n  };\r\n\r\n  const gameOver = () => {\r\n    setIsStart(false);\r\n    setState({\r\n      ...state,\r\n      isGameOver: true\r\n    });\r\n    if(currentIntervalId != undefined)\r\n        clearInterval(currentIntervalId);\r\n  }\r\n\r\n  const moveSnake = (removeLastNode = true) => {\r\n    let newSnake = state.snake;\r\n    const { squareArea } = GAME_SETTINGS.gameResolution;\r\n\r\n\r\n    const currentSnakeHead = newSnake[newSnake.length - 1];\r\n    switch(state.moveDirection){\r\n      case MoveDirectionType.RIGHT: {\r\n        if(removeLastNode)\r\n          newSnake.shift();\r\n        newSnake.push({top: currentSnakeHead.top, left: currentSnakeHead.left + squareArea});\r\n        break;\r\n      }\r\n      case MoveDirectionType.LEFT: {\r\n        if(removeLastNode)\r\n          newSnake.shift();\r\n        newSnake.push({top: currentSnakeHead.top, left: currentSnakeHead.left - squareArea});\r\n        break;\r\n      }\r\n      case MoveDirectionType.TOP: {\r\n        if(removeLastNode)\r\n          newSnake.shift();\r\n        newSnake.push({top: currentSnakeHead.top - squareArea, left: currentSnakeHead.left});\r\n        break;\r\n      }\r\n      case MoveDirectionType.BOTTOM: {\r\n        if(removeLastNode)\r\n          newSnake.shift();\r\n        newSnake.push({top: currentSnakeHead.top + squareArea, left: currentSnakeHead.left});\r\n        break;\r\n      }\r\n      \r\n    }\r\n    //clearInterval(state.intervalId);\r\n    setState({\r\n      ...state,\r\n      snake: newSnake,\r\n    });\r\n  }\r\n\r\n  const changeDirection = (newDirection: MoveDirectionType) => {\r\n    \r\n    if(state.moveDirection == MoveDirectionType.RIGHT && newDirection == MoveDirectionType.LEFT)\r\n      return;\r\n    if(state.moveDirection == MoveDirectionType.LEFT && newDirection == MoveDirectionType.RIGHT)\r\n      return;\r\n    if(state.moveDirection == MoveDirectionType.TOP && newDirection == MoveDirectionType.BOTTOM)\r\n      return;\r\n    if(state.moveDirection == MoveDirectionType.BOTTOM && newDirection == MoveDirectionType.TOP)\r\n      return;\r\n      \r\n    setState({\r\n      ...state,\r\n      moveDirection: newDirection,\r\n    });\r\n  }\r\n\r\n  const checkSnakeCollidedWithItself = () => {\r\n    const currentSnakeHead = state.snake[state.snake.length - 1];\r\n    if(currentSnakeHead){\r\n      const { left, top } = currentSnakeHead;\r\n      if(state.snake.filter((item) => item.left == left && item.top == top).length > 1){\r\n        gameOver();\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkSnakeCollidedWithBorders = () => {\r\n    const currentSnakeHead = state.snake[state.snake.length - 1];\r\n    const { width, height, squareArea } = GAME_SETTINGS.gameResolution;\r\n    if(currentSnakeHead){\r\n      if(currentSnakeHead.left < 0 || currentSnakeHead.left > width - squareArea){\r\n        gameOver();\r\n      }\r\n      if(currentSnakeHead.top < 0 || currentSnakeHead.top > height - squareArea){\r\n        gameOver();\r\n      }\r\n    }\r\n  };\r\n\r\n  const verifyColision = () => {\r\n    checkSnakeCollidedWithBorders();\r\n    checkSnakeCollidedWithItself();\r\n  };\r\n\r\n  const verifyFruit = () => {\r\n    const currentSnakeHead = state.snake[state.snake.length - 1];\r\n    if(currentSnakeHead.top == state.fruit.top && currentSnakeHead.left == state.fruit.left)\r\n      toEatFruit();\r\n  }\r\n\r\n  const toEatFruit = () => {\r\n    moveSnake(false);\r\n    changeSpeed();\r\n    setState({\r\n      ...state,\r\n      fruit: getRandomPosition(),\r\n      pontuation: state.pontuation + 1\r\n    });\r\n  }\r\n  const changeSpeed = () => {\r\n    const { minSpeed, speedDecay } = GAME_SETTINGS.speed;\r\n    if(speedSeconds > minSpeed)\r\n      setSpeedSeconds(speedSeconds - speedDecay);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    if(isStart){\r\n      if(currentIntervalId != undefined)\r\n        clearInterval(currentIntervalId);\r\n      moveSnake();\r\n      const intervalId = setInterval(() => moveSnake(), speedSeconds);\r\n      setCurrentIntervalId(intervalId);\r\n    }\r\n  }, [state.moveDirection, isStart, state.fruit]);\r\n\r\n  useEffect(() => {\r\n    verifyColision();\r\n    verifyFruit();\r\n  }, [JSON.stringify(state.snake)]);\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        state,\r\n        setState,\r\n        start,\r\n        changeDirection\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\nexport { GameContextProvider };\r\nexport default GameContext;\r\n","import React from \"react\";\r\n\r\nimport { GameContextProvider } from \"./GameContext/context\";\r\n\r\nconst GlobalContext: React.SFC = ({ children }) => {\r\n  return (\r\n    <>\r\n      <GameContextProvider>{children}</GameContextProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GlobalContext;","import styled from 'styled-components';\r\n\r\nexport const BoardContainer = styled.div`\r\n    overflow: hidden;\r\n    display: flex;\r\n    position: relative;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const SquareDesign = styled.div`\r\n    background: #000;\r\n    top: 0px;\r\n    left: 0px;\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n`;","import React from 'react';\r\nimport GAME_SETTINGS from '../../../gameSettings';\r\nimport { SquareDesign } from './styles';\r\nconst { squareArea } = GAME_SETTINGS.gameResolution;\r\n\r\ninterface IProps {\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst Square: React.FC<IProps> = ({style}) => {\r\n    return <SquareDesign style={{...style, width: squareArea, height: squareArea}}/>\r\n};\r\n\r\nexport default Square;","import React, { useContext, useState } from 'react';\r\nimport Square from '../../atoms/Square';\r\n\r\nimport GameContext from \"../../../context/GameContext/context\";\r\n\r\nconst Fruit = () => {\r\n\r\n    const { state } = useContext(GameContext);\r\n    const { top, left } = state.fruit;\r\n    \r\n    return (\r\n        <Square style={{top, left, background: '#b12603eb'}} />\r\n    )\r\n};\r\n\r\nexport default Fruit;","import React, { useContext } from 'react';\r\nimport Square from '../../atoms/Square';\r\nimport GameContext from \"../../../context/GameContext/context\";\r\n\r\nconst Snake = () => {\r\n    const { state } = useContext(GameContext);\r\n    \r\n    return (\r\n        <>\r\n            {state.snake.map(({top, left}, index)=>(\r\n                <Square key={'snake_'+index} style={{top, left, border:'1px solid #ddd'}}/>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Snake;","import React from 'react';\r\nimport { BoardContainer } from './styles';\r\nimport Fruit from '../../molecules/Fruit';\r\nimport Snake from '../../molecules/Snake';\r\nimport GAME_SETTINGS from '../../../gameSettings';\r\nconst { width, height } = GAME_SETTINGS.gameResolution;\r\nconst Board = () => {\r\n    return(\r\n        <BoardContainer \r\n            style={{width, height}}\r\n        >\r\n            <Fruit/>\r\n            <Snake/>\r\n        </BoardContainer>\r\n    );\r\n};\r\n\r\nexport default Board;","import styled from 'styled-components';\r\n\r\nexport const ButtonElement = styled.button`\r\n\r\n    @media (max-width: 700px){\r\n        font-size: .8rem;\r\n        border-width: 3px;\r\n        padding: 4px 8px;\r\n    }\r\n`;","import React, { useContext } from 'react';\r\nimport GameContext from \"../../../context/GameContext/context\";\r\nimport { ButtonElement } from './styles';\r\n\r\nconst NewGameButton: React.FC<{styles?: React.CSSProperties}> =({styles}) => {\r\n    const { start } = useContext(GameContext);\r\n\r\n    return <ButtonElement style={{fontFamily: \"'Press Start 2P', cursive\", ...styles}} className=\"nes-btn is-primary\" onClick={start}>New Game</ButtonElement>;\r\n};\r\n \r\nexport default NewGameButton;","import styled from \"styled-components\";\r\n\r\nexport const PointScreenContainer = styled.div`\r\n    @media (max-width: 700px) {\r\n        font-size: .7rem;\r\n    }\r\n`;","import React, { useContext } from 'react';\r\nimport GameContext from \"../../../context/GameContext/context\";\r\nimport { PointScreenContainer } from './styles';\r\n\r\nconst PointScreen = () => {\r\n    const { state } = useContext(GameContext);\r\n\r\n    return (\r\n        <PointScreenContainer>\r\n            Score: {state.pontuation}\r\n        </PointScreenContainer>\r\n    )\r\n}\r\n\r\nexport default PointScreen;","import styled from 'styled-components';\r\n\r\nexport const HeaderContainer = styled.div`\r\n    border-bottom: 4px solid #000;\r\n    width: 100%;\r\n    padding: 20px;\r\n    box-sizing: border-box;\r\n    \r\n    h1 {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    div {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    @media (max-width:700px) {\r\n        padding: 10px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        h1 {\r\n            font-size: 1.2rem;\r\n        }\r\n        div{\r\n            justify-content: flex-end;\r\n            button {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n`;","import React from 'react';\r\nimport NewGameButton from '../../atoms/NewGameButton';\r\nimport PointScreen from '../../atoms/PointScreen';\r\nimport { HeaderContainer } from './styles';\r\n\r\nconst Header: React.FC = () => {\r\n    \r\n    return(\r\n        <HeaderContainer>\r\n            <h1 className=\"title\">Snake Game</h1>\r\n            <div>\r\n                <NewGameButton/>\r\n                <PointScreen/>\r\n            </div>\r\n        </HeaderContainer>\r\n    );\r\n};\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nexport const GameContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 0 auto;\r\n    /* border: 1px solid #000; */\r\n    padding: 0;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    @media (max-width:700px) {\r\n        margin-top: 4px;\r\n    }\r\n\r\n`;","import React, { useContext } from 'react';\r\nimport GameContext from '../../../context/GameContext/context';\r\nimport NewGameButton from '../../atoms/NewGameButton';\r\nconst GameOverDialog = () => { \r\n\r\n    const { state } = useContext(GameContext);\r\n\r\n    return (\r\n        <dialog className=\"nes-dialog is-dark\" id=\"dialog-dark\" open={state.isGameOver}>\r\n            <form style={{textAlign: 'center'}} method=\"dialog\">\r\n                <p className=\"title\">GAME OVER</p>\r\n                <p>Your score: {state.pontuation}</p>\r\n                \r\n                <NewGameButton/>\r\n                \r\n            </form>\r\n        </dialog>\r\n    );\r\n};\r\n\r\nexport default GameOverDialog;","import styled from \"styled-components\";\r\n\r\nexport const ButtonElement = styled.button`\r\n    width: 50px;\r\n    height: 50px;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    &:focus, &:active {\r\n        outline: none;\r\n    }\r\n    &:active {\r\n        opacity: 0.2;\r\n    }\r\n\r\n    svg, i {\r\n        font-size: 1.5rem;\r\n    }\r\n`;","import React from 'react';\r\nimport { ButtonElement } from './styles';\r\nimport { IconType } from 'react-icons';\r\n \r\ninterface IProps {\r\n    onClick: () => void;\r\n}\r\n\r\nconst DpadButton: React.FC<IProps> = ({onClick, children}) => {\r\n    return (\r\n        <ButtonElement onClick={onClick}>\r\n            {children}\r\n        </ButtonElement>\r\n    )\r\n}\r\n\r\nexport default DpadButton;","import React, { useContext } from 'react';\r\nimport DpadButton from '../../../atoms/DpadButton';\r\nimport { IoCaretDown } from \"react-icons/io5\";\r\nimport MoveDirectionType from '../../../../helpers/enum/MoveDirectionType';\r\nimport GameContext from '../../../../context/GameContext/context';\r\n\r\nconst DownButton = () => {\r\n    const { changeDirection } = useContext(GameContext);\r\n    \r\n    return (\r\n        <DpadButton\r\n            onClick={() => changeDirection(MoveDirectionType.BOTTOM)}\r\n        >\r\n            <IoCaretDown/>\r\n        </DpadButton>\r\n    )\r\n}\r\n\r\nexport default DownButton;","import React, { useContext } from 'react';\r\nimport DpadButton from '../../../atoms/DpadButton';\r\nimport { IoCaretBack } from \"react-icons/io5\";\r\nimport MoveDirectionType from '../../../../helpers/enum/MoveDirectionType';\r\nimport GameContext from '../../../../context/GameContext/context';\r\n\r\nconst LeftButton = () => {\r\n    const { changeDirection } = useContext(GameContext);\r\n    \r\n    return (\r\n        <DpadButton\r\n            onClick={() => changeDirection(MoveDirectionType.LEFT)}\r\n        >\r\n            <IoCaretBack/>\r\n        </DpadButton>\r\n    )\r\n}\r\n\r\nexport default LeftButton;","import React, { useContext } from 'react';\r\nimport DpadButton from '../../../atoms/DpadButton';\r\nimport { IoCaretForward } from \"react-icons/io5\";\r\nimport MoveDirectionType from '../../../../helpers/enum/MoveDirectionType';\r\nimport GameContext from '../../../../context/GameContext/context';\r\n\r\nconst RightButton = () => {\r\n    const { changeDirection } = useContext(GameContext);\r\n    \r\n    return (\r\n        <DpadButton\r\n            onClick={() => changeDirection(MoveDirectionType.RIGHT)}\r\n        >\r\n            <IoCaretForward/>\r\n        </DpadButton>\r\n    )\r\n}\r\n\r\nexport default RightButton;","import React, { useContext } from 'react';\r\nimport DpadButton from '../../../atoms/DpadButton';\r\nimport { IoCaretUp } from \"react-icons/io5\";\r\nimport MoveDirectionType from '../../../../helpers/enum/MoveDirectionType';\r\nimport GameContext from '../../../../context/GameContext/context';\r\n\r\nconst UpButton = () => {\r\n    const { changeDirection } = useContext(GameContext);\r\n    \r\n    return (\r\n        <DpadButton\r\n            onClick={() => changeDirection(MoveDirectionType.TOP)}\r\n        >\r\n            <IoCaretUp/>\r\n        </DpadButton>\r\n    )\r\n}\r\n\r\nexport default UpButton;","import styled from \"styled-components\";\r\n\r\nexport const DPadContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    div{\r\n        display: flex;\r\n        gap: 50px;\r\n    }\r\n`;","import React from \"react\";\r\nimport DownButton from \"../MobileButtons/Down\";\r\nimport LeftButton from \"../MobileButtons/Left\";\r\nimport RightButton from \"../MobileButtons/Right\";\r\nimport UpButton from \"../MobileButtons/Up\";\r\nimport { DPadContainer } from \"./styles\";\r\n\r\nconst DPad = () => {\r\n    return (\r\n        <DPadContainer>\r\n            <UpButton/>\r\n            <div>\r\n                <LeftButton/>\r\n                <RightButton/>\r\n            </div>\r\n            <DownButton/>\r\n        </DPadContainer>\r\n    )\r\n};\r\n\r\nexport default DPad;","import styled from 'styled-components';\r\n\r\nexport const MobileControlsContainer = styled.div`\r\n    position: relative;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const NewGameContainer = styled.div`\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 4px;\r\n`;","import React from 'react';\r\nimport NewGameButton from '../../atoms/NewGameButton';\r\nimport DPad from '../../molecules/DPad';\r\nimport { MobileControlsContainer, NewGameContainer } from './styles';\r\n\r\nconst MobileControls = () => {\r\n\r\n    return(\r\n        <MobileControlsContainer>\r\n            <DPad/>\r\n            <NewGameContainer>\r\n                <NewGameButton/>\r\n            </NewGameContainer>\r\n        </MobileControlsContainer>\r\n    )\r\n}\r\n\r\nexport default MobileControls;\r\n","import React, { KeyboardEvent, useContext }  from 'react';\r\nimport Board from '../../organisms/Board';\r\nimport Header from '../../organisms/Header';\r\nimport { GameContainer } from './styles';\r\nimport GameContext from \"../../../context/GameContext/context\";\r\nimport MoveDirectionType from '../../../helpers/enum/MoveDirectionType';\r\nimport GAME_SETTINGS from '../../../gameSettings';\r\nimport GameOverDialog from '../../molecules/GameOverDialog';\r\nimport MobileControls from '../../organisms/MobileControls';\r\nconst { width, height } = GAME_SETTINGS.gameResolution;\r\nconst Game = () => {\r\n    const { changeDirection } = useContext(GameContext);\r\n    \r\n    const handleGame = (e: KeyboardEvent) => {\r\n        switch(e.code){\r\n            case 'ArrowDown':{\r\n                changeDirection(MoveDirectionType.BOTTOM);\r\n                break;\r\n            }\r\n            case 'ArrowUp':{\r\n                changeDirection(MoveDirectionType.TOP);\r\n                break;\r\n            }\r\n            case 'ArrowRight':{\r\n                changeDirection(MoveDirectionType.RIGHT);\r\n                break;\r\n            }\r\n            case 'ArrowLeft':{\r\n                changeDirection(MoveDirectionType.LEFT);\r\n                break;\r\n            }    \r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <GameContainer\r\n                className=\"nes-container with-title\"\r\n                role=\"button\"\r\n                tabIndex={0}\r\n                onKeyUp={handleGame}\r\n                onKeyDown={()=>{}}\r\n                style={{width}}\r\n            >\r\n                <Header/>\r\n                <Board/>\r\n                <GameOverDialog/>\r\n            </GameContainer>\r\n            <MobileControls/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\nimport GlobalContext from \"./context/index\";\r\nimport Game from './components/templates/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalContext>\r\n      <Game/>  \r\n    </GlobalContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"nes.css/css/nes.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}