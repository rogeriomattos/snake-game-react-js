{"version":3,"sources":["helpers/enum/MoveDirectionType.ts","gameSettings.ts","helpers/functions/createInitalSnake.ts","helpers/functions/getRandomPosition.ts","context/GameContext/context.tsx","context/index.tsx","components/organisms/Board/styles.ts","components/atoms/Square/styles.ts","components/atoms/Square/index.tsx","components/molecules/Fruit/index.tsx","components/molecules/Snake/index.tsx","components/organisms/Board/index.tsx","components/atoms/NewGameButton/index.tsx","components/atoms/PointScreen/index.tsx","components/organisms/Header/styles.ts","components/organisms/Header/index.tsx","components/templates/Game/styles.ts","components/molecules/GameOverDialog/index.tsx","components/templates/Game/index.tsx","App.tsx","index.tsx"],"names":["MoveDirectionType","GAME_SETTINGS","createInitalSnake","gameResolution","height","width","squareArea","top","Math","floor","left","snake","i","push","getRandomInt","min","max","random","getRandomPosition","DEFAULT_VALUE","state","fruit","pontuation","moveDirection","RIGHT","setState","start","changeDirection","newDirection","isGameOver","GameContext","createContext","GameContextProvider","children","useState","currentIntervalId","setCurrentIntervalId","isStart","setIsStart","speed","initial","speedSeconds","setSpeedSeconds","gameOver","undefined","clearInterval","moveSnake","removeLastNode","newSnake","currentSnakeHead","length","shift","LEFT","TOP","BOTTOM","verifyColision","checkSnakeCollidedWithBorders","filter","item","checkSnakeCollidedWithItself","toEatFruit","changeSpeed","minSpeed","speedDecay","useEffect","intervalId","setInterval","verifyFruit","JSON","stringify","Provider","value","console","log","GlobalContext","BoardContainer","styled","div","SquareDesign","Square","style","Fruit","useContext","background","Snake","map","index","border","Board","NewGameButton","fontFamily","className","onClick","PointScreen","HeaderContainer","Header","GameContainer","GameOverDialog","id","open","textAlign","method","Game","role","tabIndex","onKeyUp","e","code","onKeyDown","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a488c6e.chunk.js","sourcesContent":["enum MoveDirectionType {\n    TOP = 1,\n    BOTTOM = 2,\n    LEFT = 3,\n    RIGHT = 4,\n}\n\nexport default MoveDirectionType;","const GAME_SETTINGS = {\n    \"gameResolution\":{\n        \"width\": 500,\n        \"height\": 450,\n        \"squareArea\": 12.5\n    },\n    \"speed\": {\n        \"initial\": 300,\n        \"minSpeed\": 100,\n        \"speedDecay\": 25 \n    }\n};\n\nexport default GAME_SETTINGS;","import GAME_SETTINGS from \"../../gameSettings\";\nimport IPosition from \"../contracts/IPosition\";\n\nconst createInitalSnake = () => {\n    const { height, width, squareArea } = GAME_SETTINGS.gameResolution;  \n    const top = Math.floor(Math.floor(height/squareArea)/2) * squareArea;\n    const left = Math.floor(Math.floor(width/squareArea)/2) * squareArea;\n  \n    let snake: IPosition[] = [];\n  \n    for(let i = 0; i < 3; i++){\n      snake.push({top, left: left + (squareArea * i)});\n    }\n  \n    return snake;\n};\n\nexport default createInitalSnake;","import GAME_SETTINGS from \"../../gameSettings\";\nimport IPosition from \"../contracts/IPosition\";\nconst { width, height, squareArea } = GAME_SETTINGS.gameResolution;\n\nconst getRandomPosition = ():IPosition => {\n    let left = getRandomInt(0, width/squareArea) * squareArea;\n    let top = getRandomInt(0, height/squareArea) * squareArea;\n    \n    if(left == width)\n        left = left - squareArea;\n    if(top == height)\n        top = top - squareArea;\n    \n    return { left, top};\n};\n\nconst getRandomInt = (min: number, max: number) => {   \n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default getRandomPosition;","import React, { createContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport GAME_SETTINGS from \"../../gameSettings\";\nimport IPosition from '../../helpers/contracts/IPosition';\nimport MoveDirectionType from \"../../helpers/enum/MoveDirectionType\";\nimport createInitalSnake from \"../../helpers/functions/createInitalSnake\";\nimport getRandomPosition from \"../../helpers/functions/getRandomPosition\";\n\n//Tipando os dados que quero para usu√°rio\ntype GameType = {\n    fruit: IPosition;\n    snake: IPosition[];\n    pontuation: number;\n    moveDirection: MoveDirectionType;\n    isGameOver: boolean;\n};\n\n//Tipando as Props do contexto\ntype PropsGameContext = {\n  state: GameType;\n  setState: React.Dispatch<React.SetStateAction<GameType>>;\n  start: () => void;\n  changeDirection: (newDirection: MoveDirectionType) => void;\n};\n\n\n\n//Valor default do contexto\nconst DEFAULT_VALUE = {\n  state: {\n    fruit: getRandomPosition(),\n    pontuation: 0,\n    moveDirection: MoveDirectionType.RIGHT,\n    snake: createInitalSnake()\n  } as GameType,\n  setState: () => {}, //fun√ß√£o de inicializa√ß√£o\n  start: () => {},\n  changeDirection: (newDirection: MoveDirectionType) => {},\n  isGameOver: false\n};\n\n//criando nosso contexto GameContext\nconst GameContext = createContext<PropsGameContext>(DEFAULT_VALUE);\n\n/**\n * Fun√ß√£o que ir√° conter o estado e fun√ß√£o que ir√° alterar o estado 'setState'\n * quer ir√° prover o contexto para os componentes filhos da √°rvore\n */\nconst GameContextProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState(DEFAULT_VALUE.state);\n  const [currentIntervalId, setCurrentIntervalId] = useState<NodeJS.Timeout>();\n  const [isStart, setIsStart] = useState(false);\n  const [speedSeconds, setSpeedSeconds] = useState(GAME_SETTINGS.speed.initial);\n  const start = () => {\n    console.log('new game');\n    if(currentIntervalId != undefined)\n        clearInterval(currentIntervalId);\n    setState({\n      ...state,\n      fruit: getRandomPosition(),\n      snake: createInitalSnake(),\n      pontuation: 0,\n      isGameOver: false\n    });\n    setSpeedSeconds(GAME_SETTINGS.speed.initial);\n    setIsStart(true);\n  };\n\n  const gameOver = () => {\n    setIsStart(false);\n    setState({\n      ...state,\n      isGameOver: true\n    });\n    if(currentIntervalId != undefined)\n        clearInterval(currentIntervalId);\n  }\n\n  const moveSnake = (removeLastNode = true) => {\n    let newSnake = state.snake;\n    const { squareArea } = GAME_SETTINGS.gameResolution;\n\n\n    const currentSnakeHead = newSnake[newSnake.length - 1];\n    switch(state.moveDirection){\n      case MoveDirectionType.RIGHT: {\n        if(removeLastNode)\n          newSnake.shift();\n        newSnake.push({top: currentSnakeHead.top, left: currentSnakeHead.left + squareArea});\n        break;\n      }\n      case MoveDirectionType.LEFT: {\n        if(removeLastNode)\n          newSnake.shift();\n        newSnake.push({top: currentSnakeHead.top, left: currentSnakeHead.left - squareArea});\n        break;\n      }\n      case MoveDirectionType.TOP: {\n        if(removeLastNode)\n          newSnake.shift();\n        newSnake.push({top: currentSnakeHead.top - squareArea, left: currentSnakeHead.left});\n        break;\n      }\n      case MoveDirectionType.BOTTOM: {\n        if(removeLastNode)\n          newSnake.shift();\n        newSnake.push({top: currentSnakeHead.top + squareArea, left: currentSnakeHead.left});\n        break;\n      }\n      \n    }\n    //clearInterval(state.intervalId);\n    setState({\n      ...state,\n      snake: newSnake,\n    });\n  }\n\n  const changeDirection = (newDirection: MoveDirectionType) => {\n    \n    if(state.moveDirection == MoveDirectionType.RIGHT && newDirection == MoveDirectionType.LEFT)\n      return;\n    if(state.moveDirection == MoveDirectionType.LEFT && newDirection == MoveDirectionType.RIGHT)\n      return;\n    if(state.moveDirection == MoveDirectionType.TOP && newDirection == MoveDirectionType.BOTTOM)\n      return;\n    if(state.moveDirection == MoveDirectionType.BOTTOM && newDirection == MoveDirectionType.TOP)\n      return;\n      \n    setState({\n      ...state,\n      moveDirection: newDirection,\n    });\n  }\n\n  const checkSnakeCollidedWithItself = () => {\n    const currentSnakeHead = state.snake[state.snake.length - 1];\n    if(currentSnakeHead){\n      const { left, top } = currentSnakeHead;\n      if(state.snake.filter((item) => item.left == left && item.top == top).length > 1){\n        gameOver();\n      }\n    }\n  };\n\n  const checkSnakeCollidedWithBorders = () => {\n    const currentSnakeHead = state.snake[state.snake.length - 1];\n    const { width, height, squareArea } = GAME_SETTINGS.gameResolution;\n    if(currentSnakeHead){\n      if(currentSnakeHead.left < 0 || currentSnakeHead.left > width - squareArea){\n        gameOver();\n      }\n      if(currentSnakeHead.top < 0 || currentSnakeHead.top > height - squareArea){\n        gameOver();\n      }\n    }\n  };\n\n  const verifyColision = () => {\n    checkSnakeCollidedWithBorders();\n    checkSnakeCollidedWithItself();\n  };\n\n  const verifyFruit = () => {\n    const currentSnakeHead = state.snake[state.snake.length - 1];\n    if(currentSnakeHead.top == state.fruit.top && currentSnakeHead.left == state.fruit.left)\n      toEatFruit();\n  }\n\n  const toEatFruit = () => {\n    moveSnake(false);\n    changeSpeed();\n    setState({\n      ...state,\n      fruit: getRandomPosition(),\n      pontuation: state.pontuation + 1\n    });\n  }\n  const changeSpeed = () => {\n    const { minSpeed, speedDecay } = GAME_SETTINGS.speed;\n    if(speedSeconds > minSpeed)\n      setSpeedSeconds(speedSeconds - speedDecay);\n  };\n\n  useEffect(()=>{\n    if(isStart){\n      if(currentIntervalId != undefined)\n        clearInterval(currentIntervalId);\n      moveSnake();\n      const intervalId = setInterval(() => moveSnake(), speedSeconds);\n      setCurrentIntervalId(intervalId);\n    }\n  }, [state.moveDirection, isStart, state.fruit]);\n\n  useEffect(() => {\n    verifyColision();\n    verifyFruit();\n  }, [JSON.stringify(state.snake)]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        state,\n        setState,\n        start,\n        changeDirection\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\nexport { GameContextProvider };\nexport default GameContext;\n","import React from \"react\";\n\nimport { GameContextProvider } from \"./GameContext/context\";\n\nconst GlobalContext: React.SFC = ({ children }) => {\n  return (\n    <>\n      <GameContextProvider>{children}</GameContextProvider>;\n    </>\n  );\n};\n\nexport default GlobalContext;","import styled from 'styled-components';\n\nexport const BoardContainer = styled.div`\n    overflow: hidden;\n    display: flex;\n    position: relative;\n`;","import styled from \"styled-components\";\n\nexport const SquareDesign = styled.div`\n    background: #000;\n    top: 0px;\n    left: 0px;\n    box-sizing: border-box;\n    position: absolute;\n`;","import React from 'react';\nimport GAME_SETTINGS from '../../../gameSettings';\nimport { SquareDesign } from './styles';\nconst { squareArea } = GAME_SETTINGS.gameResolution;\n\ninterface IProps {\n    style?: React.CSSProperties;\n}\n\nconst Square: React.FC<IProps> = ({style}) => {\n    return <SquareDesign style={{...style, width: squareArea, height: squareArea}}/>\n};\n\nexport default Square;","import React, { useContext, useState } from 'react';\nimport Square from '../../atoms/Square';\n\nimport GameContext from \"../../../context/GameContext/context\";\n\nconst Fruit = () => {\n\n    const { state } = useContext(GameContext);\n    const { top, left } = state.fruit;\n    \n    return (\n        <Square style={{top, left, background: '#b12603eb'}} />\n    )\n};\n\nexport default Fruit;","import React, { useContext } from 'react';\nimport Square from '../../atoms/Square';\nimport GameContext from \"../../../context/GameContext/context\";\n\nconst Snake = () => {\n    const { state } = useContext(GameContext);\n    \n    return (\n        <>\n            {state.snake.map(({top, left}, index)=>(\n                <Square key={'snake_'+index} style={{top, left, border:'1px solid #ddd'}}/>\n            ))}\n        </>\n    );\n};\n\nexport default Snake;","import React from 'react';\nimport { BoardContainer } from './styles';\nimport Fruit from '../../molecules/Fruit';\nimport Snake from '../../molecules/Snake';\nimport GAME_SETTINGS from '../../../gameSettings';\nconst { width, height } = GAME_SETTINGS.gameResolution;\nconst Board = () => {\n    return(\n        <BoardContainer \n            style={{width, height}}\n        >\n            <Fruit/>\n            <Snake/>\n        </BoardContainer>\n    );\n};\n\nexport default Board;","import React, { useContext } from 'react';\nimport GameContext from \"../../../context/GameContext/context\";\n\nconst NewGameButton =() => {\n    const { start } = useContext(GameContext);\n\n    return <button style={{fontFamily: \"'Press Start 2P', cursive\"}} className=\"nes-btn is-primary\" onClick={start}>New Game</button>;\n};\n\nexport default NewGameButton;","import React, { useContext } from 'react';\nimport GameContext from \"../../../context/GameContext/context\";\n\nconst PointScreen = () => {\n    const { state } = useContext(GameContext);\n\n    return (\n        <div>\n            Pontuation: {state.pontuation}\n        </div>\n    )\n}\n\nexport default PointScreen;","import styled from 'styled-components';\n\nexport const HeaderContainer = styled.div`\n    border-bottom: 4px solid #000;\n    width: 100%;\n    padding: 20px;\n    box-sizing: border-box;\n    \n    h1 {\n        margin: 0;\n        padding: 0;\n    }\n\n    div {\n        display: flex;\n        justify-content: space-between;\n    }\n`;","import React from 'react';\nimport NewGameButton from '../../atoms/NewGameButton';\nimport PointScreen from '../../atoms/PointScreen';\nimport { HeaderContainer } from './styles';\n\nconst Header: React.FC = () => {\n    \n    return(\n        <HeaderContainer>\n            <h1 className=\"title\">Snake Game</h1>\n            <div>\n                <NewGameButton/>\n                <PointScreen/>\n            </div>\n        </HeaderContainer>\n    );\n};\n\nexport default Header;","import styled from 'styled-components';\n\nexport const GameContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n    /* border: 1px solid #000; */\n    padding: 0;\n    &:focus {\n        outline: none;\n    }\n`;","import React, { useContext } from 'react';\nimport GameContext from '../../../context/GameContext/context';\nimport NewGameButton from '../../atoms/NewGameButton';\nconst GameOverDialog = () => { \n\n    const { state } = useContext(GameContext);\n\n    return (\n        <dialog className=\"nes-dialog is-dark\" id=\"dialog-dark\" open={state.isGameOver}>\n            <form style={{textAlign: 'center'}} method=\"dialog\">\n                <p className=\"title\">GAME OVER</p>\n                <p>Your pontuation: {state.pontuation}</p>\n                \n                <NewGameButton/>\n                \n            </form>\n        </dialog>\n    );\n};\n\nexport default GameOverDialog;","import React, { KeyboardEvent, useContext }  from 'react';\nimport Board from '../../organisms/Board';\nimport Header from '../../organisms/Header';\nimport { GameContainer } from './styles';\nimport GameContext from \"../../../context/GameContext/context\";\nimport MoveDirectionType from '../../../helpers/enum/MoveDirectionType';\nimport GAME_SETTINGS from '../../../gameSettings';\nimport GameOverDialog from '../../molecules/GameOverDialog';\nconst { width, height } = GAME_SETTINGS.gameResolution;\nconst Game = () => {\n    const { changeDirection } = useContext(GameContext);\n    \n    const handleGame = (e: KeyboardEvent) => {\n        switch(e.code){\n            case 'ArrowDown':{\n                changeDirection(MoveDirectionType.BOTTOM);\n                break;\n            }\n            case 'ArrowUp':{\n                changeDirection(MoveDirectionType.TOP);\n                break;\n            }\n            case 'ArrowRight':{\n                changeDirection(MoveDirectionType.RIGHT);\n                break;\n            }\n            case 'ArrowLeft':{\n                changeDirection(MoveDirectionType.LEFT);\n                break;\n            }    \n        }\n    };\n\n    return (\n        <GameContainer\n            className=\"nes-container with-title\"\n            role=\"button\"\n            tabIndex={0}\n            onKeyUp={handleGame}\n            onKeyDown={()=>{}}\n            style={{width}}\n        >\n            <Header/>\n            <Board/>\n            <GameOverDialog/>\n        </GameContainer>\n    );\n};\n\nexport default Game;","import React from 'react';\nimport GlobalContext from \"./context/index\";\nimport Game from './components/templates/Game';\n\nfunction App() {\n  return (\n    <GlobalContext>\n      <Game/>  \n    </GlobalContext>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"nes.css/css/nes.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}